generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Tenant {
  id               String            @id @default(cuid())
  name             String
  domain           String?
  logo             String?
  active           Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  availabilities   Availability[]
  bookings         Booking[]
  exceptionDates   ExceptionDate[]
  interviewees     Interviewee[]
  intervieweeNotes IntervieweeNote[]
  jobRoles         JobRole[]
  users            TenantUser[]
  userSettings     UserSettings[]
}

model User {
  id               String            @id @default(cuid())
  name             String?
  email            String            @unique
  emailVerified    DateTime?
  image            String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  accounts         Account[]
  availabilities   Availability[]
  bookings         Booking[]
  exceptionDates   ExceptionDate[]
  intervieweeNotes IntervieweeNote[]
  tenants          TenantUser[]
  userSettings     UserSettings[]
}

model TenantUser {
  id        String   @id @default(cuid())
  tenantId  String
  userId    String
  role      String   @default("USER")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([userId, tenantId])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Interviewee {
  id                String            @id @default(cuid())
  tenantId          String
  name              String
  email             String
  phone             String?
  resumeLink        String?
  currentCompany    String?
  yearsOfExperience Int?
  skills            String?
  currentCTC        String?
  expectedCTC       String?
  noticePeriod      String?
  currentLocation   String?
  status            String            @default("NEW")
  currentRound      Int               @default(0)
  roleId            String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  bookings          Booking[]
  role              JobRole?          @relation(fields: [roleId], references: [id])
  tenant            Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  notes             IntervieweeNote[]

  @@unique([email, tenantId])
}

model JobRole {
  id           String        @id @default(cuid())
  tenantId     String
  title        String
  description  String?
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  interviewees Interviewee[]
  tenant       Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model IntervieweeNote {
  id            String      @id @default(cuid())
  content       String
  intervieweeId String
  userId        String
  tenantId      String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  tenant        Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  interviewee   Interviewee @relation(fields: [intervieweeId], references: [id], onDelete: Cascade)
}

model UserSettings {
  id                  String   @id @default(cuid())
  userId              String
  tenantId            String
  maxSchedulesPerDay  Int      @default(3)
  advanceBookingDays  Int      @default(30)
  meetingDuration     Int      @default(30)
  bufferBetweenEvents Int      @default(15)
  zoomConnected       Boolean  @default(false)
  zoomData            String?
  googleConnected     Boolean  @default(false)
  googleData          String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  tenant              Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, tenantId])
}

model Availability {
  id        String   @id @default(cuid())
  userId    String
  tenantId  String
  dayOfWeek Int
  startTime String
  endTime   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, tenantId, dayOfWeek])
}

model ExceptionDate {
  id        String   @id @default(cuid())
  date      DateTime
  isBlocked Boolean  @default(true)
  userId    String
  tenantId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, tenantId, date])
}

model Booking {
  id               String       @id @default(cuid())
  tenantId         String
  title            String
  startTime        DateTime
  endTime          DateTime
  interviewerId    String
  intervieweeEmail String
  intervieweeName  String
  status           String       @default("PENDING")
  zoomMeetingId    String?
  zoomJoinUrl      String?
  googleEventId    String?
  candidateId      String?
  feedback         String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  candidate        Interviewee? @relation(fields: [candidateId], references: [id])
  interviewer      User         @relation(fields: [interviewerId], references: [id])
  tenant           Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}
